set nocompatible              " required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'gmarik/Vundle.vim'

" Fold Class / Defs .. not sure if i like it
"Plugin 'tmhedberg/SimpylFold'

Plugin 'vim-scripts/indentpython.vim'
Bundle 'Valloric/YouCompleteMe'

" Undo Tree Visual
Plugin 'mbbill/undotree'

" Code Checking old 
Plugin 'vim-syntastic/syntastic'


"Code Checking New Version
"Plugin 'w0rp/ale'

Plugin 'nvie/vim-flake8'


" Color Schemes
Plugin 'jnurmine/Zenburn'
Plugin 'altercation/vim-colors-solarized'


" Tree View
Plugin 'scrooloose/nerdtree'

" Nerd Tree Tabs
Plugin 'jistr/vim-nerdtree-tabs'

" Status bar at the bottom
Bundle 'Lokaltog/powerline', {'rtp': 'powerline/bindings/vim/'}


" add all your plugins here (note older versions of Vundle
" used Bundle instead of Plugin)
" ...

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required


"split navigations
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>



let g:SimpylFold_docstring_preview=1


au BufNewFile,BufRead *.py
    \ set tabstop=4 |
    \ set softtabstop=4 |
    \ set shiftwidth=4 |
    \ set textwidth=79 |
    \ set expandtab |
    \ set autoindent |
    \ set fileformat=unix


au BufNewFile,BufRead *.js,*.html,*.css
    \ set tabstop=2 |
    \ set softtabstop=2 |
    \ set shiftwidth=2

" White Space Detection
"au BufRead,BufNewFile *.py,*.pyw,*.c,*.h match BadWhitespace /\s\+$/


" Set default encoding to UTF-8
set encoding=utf-8


let g:ycm_autoclose_preview_window_after_completion=1
map <leader>g  :YcmCompleter GoToDefinitionElseDeclaration<CR>


let g:ycm_autoclose_preview_window_after_completion=1
map <leader>g  :YcmCompleter GoToDefinitionElseDeclaration<CR>


let python_highlight_all=1
syntax on


"if has('gui_running')
"  set background=dark
"  colorscheme solarized
"else
"  colorscheme zenburn
"endif


call togglebg#map("<F5>")


" Auto Load NERDTree if no file specified
"
autocmd StdinReadPre * let s:std_in=1

autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif

" Nerd Tree Shortcut CTRL+N
map <C-n> :NERDTreeToggle<CR>
" Nerd tree show hidden files
let NERDTreeShowHidden=1


" Set Line Numbers
set nu

" Enable status bar at the bottom for OSX
set laststatus=2

" Set Auto Indent for python
set autoindent

" Unerline cursor
set cursorline



" Show Matching pair of {} or []
set showmatch

" Full python higlighting 
let python_highlight_all = 1



" Sytastic Settings
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0

" VIM Config auto Reload after save 
"
"if has ('autocmd') " Remain compatible with earlier versions
" augroup vimrc     " Source vim configuration upon save
"    autocmd! BufWritePost $MYVIMRC source % | echom "Reloaded " . $MYVIMRC | redraw
"    autocmd! BufWritePost $MYGVIMRC if has('gui_running') | so % | echom "Reloaded " . $MYGVIMRC | endif | redraw
"  augroup END
"endif " has autocmd



" Undow Tree Shorcut key
nnoremap <F4> :UndotreeToggle<cr>

" Virtual ENV configuration
" python with virtualenv support
py << EOF
import os
import sys
if 'VIRTUAL_ENV' in os.environ:
  project_base_dir = os.environ['VIRTUAL_ENV']
  activate_this = os.path.join(project_base_dir, 'bin/activate_this.py')
  execfile(activate_this, dict(__file__=activate_this))
EOF
